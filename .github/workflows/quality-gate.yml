name: Quality Gate

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install quality tools
      run: |
        pip install flake8 black isort mypy pylint
        pip install -r requirements.txt

    - name: Run Black formatter check
      run: |
        black --check --diff scripts/python/

    - name: Run isort import check
      run: |
        isort --check-only --diff scripts/python/

    - name: Run Flake8 linting
      run: |
        flake8 scripts/python/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Run MyPy type checking
      run: |
        mypy scripts/python/ --ignore-missing-imports

    - name: Run Pylint analysis
      run: |
        pylint scripts/python/ --output-format=json > pylint-report.json || true
        pylint scripts/python/

    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-reports
        path: pylint-report.json

  markdown-lint:
    name: Markdown Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install markdownlint
      run: npm install -g markdownlint-cli

    - name: Run markdownlint
      run: |
        markdownlint "**/*.md" --config .markdownlint.json

  yaml-lint:
    name: YAML Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install yamllint
      run: pip install yamllint

    - name: Run yamllint
      run: |
        yamllint .github/workflows/ -c .yamllint.yml

  powershell-quality:
    name: PowerShell Quality Check
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install PSScriptAnalyzer
      shell: powershell
      run: |
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser

    - name: Run PSScriptAnalyzer
      shell: powershell
      run: |
        $results = Invoke-ScriptAnalyzer -Path "scripts/powercli/" -Recurse -Settings PSGallery
        if ($results) {
          Write-Output "PSScriptAnalyzer found issues:"
          $results | Format-Table
          exit 1
        } else {
          Write-Output "No PSScriptAnalyzer issues found"
        }

  documentation-check:
    name: Documentation Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check for broken links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/mlc_config.json'

    - name: Validate README structure
      run: |
        # Check if README has required sections
        required_sections=("Overview" "Features" "Quick Start" "Documentation" "Contributing" "License")
        for section in "${required_sections[@]}"; do
          if ! grep -q "## .*$section" README.md; then
            echo "Missing required section: $section"
            exit 1
          fi
        done
        echo "All required sections found in README.md"

    - name: Check file structure
      run: |
        # Validate expected directory structure
        expected_dirs=("scripts" "docs" "examples" "labs" "tests" ".github")
        for dir in "${expected_dirs[@]}"; do
          if [ ! -d "$dir" ]; then
            echo "Missing expected directory: $dir"
            exit 1
          fi
        done
        echo "Directory structure validation passed"

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check license file
      run: |
        if [ ! -f "LICENSE" ]; then
          echo "LICENSE file not found"
          exit 1
        fi
        echo "LICENSE file found"

    - name: Validate license headers
      run: |
        # Check for license headers in Python files
        python_files=$(find scripts/python -name "*.py")
        for file in $python_files; do
          if ! head -20 "$file" | grep -q -i "license\|copyright"; then
            echo "Missing license header in: $file"
          fi
        done